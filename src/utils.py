# src/utils.py (PHI√äN B·∫¢N T·ªêI ∆ØU)

import json
from pathlib import Path
import streamlit as st

# --- 1. H√ÄM CHUNG ƒê·ªÇ T·∫¢I D·ªÆ LI·ªÜU JSON (THAY TH·∫æ CHO 2 H√ÄM C≈®) ---
@st.cache_data
def load_json_data(file_name: str, show_error: bool = False):
    """
    H√†m chung ƒë·ªÉ t·∫£i v√† cache d·ªØ li·ªáu t·ª´ m·ªôt file JSON trong th∆∞ m·ª•c data.

    Args:
        file_name (str): T√™n file JSON (v√≠ d·ª•: "knowledge_base.json").
        show_error (bool): C√≥ hi·ªÉn th·ªã l·ªói tr√™n giao di·ªán n·∫øu file kh√¥ng t·ªìn t·∫°i kh√¥ng.

    Returns:
        list | dict: D·ªØ li·ªáu t·ª´ file JSON, ho·∫∑c list/dict r·ªóng n·∫øu c√≥ l·ªói.
    """
    project_root = Path(__file__).parent.parent
    data_path = project_root / "data" / file_name
    
    try:
        with open(data_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        if show_error:
            st.error(f"L·ªói: Kh√¥ng th·ªÉ t·∫£i ho·∫∑c ph√¢n t√≠ch file '{file_name}'. Chi ti·∫øt: {e}")
        # Tr·∫£ v·ªÅ ki·ªÉu d·ªØ li·ªáu r·ªóng ph√π h·ª£p (list cho nhi·ªÅu items, dict cho 1 item)
        if 'comparison' in file_name:
             return {}
        return []

# --- 2. H√ÄM T√åM KI·∫æM ENTRY THEO ID ---
def get_entry_by_id(entry_id: str, knowledge_base: list):
    """
    T√¨m v√† tr·∫£ v·ªÅ m·ªôt entry (ch·ªß ƒë·ªÅ) t·ª´ kho tri th·ª©c d·ª±a tr√™n ID.
    """
    for entry in knowledge_base:
        if entry.get('id') == entry_id:
            return entry
    return None

# --- 3. H√ÄM L·∫§Y B·∫¢N T√ìM T·∫ÆT SO S√ÅNH (ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T ƒê·ªÇ D√ôNG H√ÄM CHUNG) ---
def get_comparison_summary(entry1_id: str, entry2_id: str):
    """
    T√¨m v√† tr·∫£ v·ªÅ b·∫£n t√≥m t·∫Øt so s√°nh cho m·ªôt c·∫∑p ch·ªß ƒë·ªÅ.
    """
    # B∆∞·ªõc 1: T·∫£i d·ªØ li·ªáu so s√°nh b·∫±ng h√†m chung
    comparison_data = load_json_data("comparison_summary.json")
    
    if not comparison_data:
        return None

    # B∆∞·ªõc 2: T√¨m ki·∫øm c·∫∑p so s√°nh (logic n√†y v·∫´n r·∫•t t·ªët)
    target_pair = {entry1_id, entry2_id}
    
    for item in comparison_data:
        if 'pair' in item and set(item.get('pair', [])) == target_pair:
            summary = item.get('summary', {})
            # B∆∞·ªõc 3: ƒê·∫£m b·∫£o th·ª© t·ª± d·ªØ li·ªáu tr·∫£ v·ªÅ l√† ch√≠nh x√°c
            if item['pair'][0] == entry1_id:
                return summary
            else:
                # Ho√°n ƒë·ªïi v·ªã tr√≠ c·ªßa pattern1 v√† pattern2 trong summary
                swapped_summary = {}
                for key, values in summary.items():
                    if isinstance(values, dict) and 'pattern1' in values and 'pattern2' in values:
                        swapped_summary[key] = {
                            'pattern1': values.get('pattern2', ''),
                            'pattern2': values.get('pattern1', '')
                        }
                    else:
                        swapped_summary[key] = values
                return swapped_summary
    return None

# --- 4. H√ÄM HI·ªÇN TH·ªä CHI TI·∫æT ENTRY (ƒê·ªîI T√äN ƒê·ªÇ T·ªîNG QU√ÅT H∆†N) ---
def display_entry_details(entry: dict):
    """
    Nh·∫≠n v√†o m·ªôt dictionary c·ªßa m·ªôt ch·ªß ƒë·ªÅ v√† hi·ªÉn th·ªã chi ti·∫øt c·ªßa n√≥.
    """
    if not entry:
        st.warning("Kh√¥ng t√¨m th·∫•y th√¥ng tin cho ch·ªß ƒë·ªÅ n√†y.")
        return

    # S·ª≠ d·ª•ng c√°c key chung t·ª´ c·∫•u tr√∫c d·ªØ li·ªáu m·ªõi c·ªßa b·∫°n
    st.markdown(f"### üéØ V·∫•n ƒë·ªÅ gi·∫£i quy·∫øt / M·ª•c ƒë√≠ch")
    st.info(entry.get('problem_solved', 'Ch∆∞a c√≥ m√¥ t·∫£.'))

    st.markdown(f"### ‚úÖ ƒê·ªãnh nghƒ©a / Gi·∫£i ph√°p")
    st.success(entry.get('definition', entry.get('solution_description', 'Ch∆∞a c√≥ m√¥ t·∫£.')))
    
    st.markdown(f"### üñºÔ∏è Minh h·ªça / S∆° ƒë·ªì")
    # Gi·∫£ s·ª≠ b·∫°n c√≥ key 'image_url' trong d·ªØ li·ªáu m·ªõi
    if entry.get('image_url'):
        st.image(entry.get('image_url'))
    else:
        st.markdown("_Kh√¥ng c√≥ h√¨nh ·∫£nh minh h·ªça._")

    st.markdown(f"### üêç V√≠ d·ª•")
    # Gi·∫£ s·ª≠ b·∫°n c√≥ key 'example_markdown'
    example = entry.get('example_markdown', '')
    if not example:
        st.markdown("_Kh√¥ng c√≥ v√≠ d·ª•._")
    else:
        # Markdown c√≥ th·ªÉ ch·ª©a code block, Streamlit s·∫Ω t·ª± render
        st.markdown(example)